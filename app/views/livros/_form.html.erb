

<div class="livro form">

  <%= form_with(model: livro, local: true) do |form| %>
       <% if livro.errors.any? %>

         <div id="error_explanation" class="panel panel-danger mensagem-erro-cabecalho">
           <div class="panel-heading">
               <h3 class="panel-title"><%= pluralize(livro.errors.count, "error(s)") %> ao salvar:</h3>
            </div>
           <div class="panel-body">
             <ul>
             <% livro.errors.full_messages.each do |message| %>
               <li><%= message.gsub('Livro autors', '') %></li>
             <% end %>
             </ul>
           </div>
         </div>
       <% end %>
    
    <div class="row">
       <div class="col-lg-6 form-group">   
           <%= form.label :nome, :class => 'control-label required' %>
           <%= form.text_field :nome, id: :user_nome, :class => 'form-control' %>
       </div>
       <div class="col-lg-6 form-group">   
           <%= form.label :edicao, :class => 'control-label required' %>
           <%= form.text_field :edicao, id: :user_nome, :class => 'form-control' %>
       </div>
       <div class="col-lg-6 form-group">   
           <%= form.label :qtd_paginas, :class => 'control-label required' %>
           <%= form.text_field :qtd_paginas, type: 'number', id: :user_nome, :class => 'form-control' %>
       </div>
       <div class="col-lg-6 form-group">   
           <%= form.label :qtd_livros, :class => 'control-label required' %>
           <%= form.text_field :qtd_livros, type: 'number', id: :user_nome, :class => 'form-control' %>
       </div>
       <div class="col-lg-6 form-group">   
           <%= form.label :descricao, :class => 'control-label required' %>
           <%= form.text_field :descricao, id: :user_nome, :class => 'form-control' %>
       </div>
       <div class="col-lg-6 form-group">   
           <%= form.label :editora_id, :class => 'control-label required' %>
           <%= form.collection_select :editora_id, listEditorasAll, :id, :nome, {:prompt => 'Selecionar'}, :class => 'form-control', :id => 'editora_id'%>
       </div>
       <div class="col-lg-6 form-group">   
           <%= form.label :categore_id, :class => 'control-label required' %>
           <%= form.collection_select :categore_id, listCategoresAll, :id, :nome, {:prompt => 'Selecionar'}, :class => 'form-control', :id => 'categore_id' %>
       </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <h3 class="page-header">
                Autores
            </h3>
        </div>
    </div>
    <div id="responsavelalunos">
        <%= form.fields_for :livro_autors do |livro_autor| %>
        <%= render 'livro_autor_fields', f: livro_autor %>
          <%end%>
    </div>
    <div class='row'>
      <div class="col-lg-8 form-group">  
          <%= form.collection_select :autor_id, listAutorsAll, :id, :nome, {prompt: "Selecionar"}, class: "form-control", :id => 'autor_id_pesquisa' %>
          <%= hidden_field_tag 'hidden_autor_id', '' %>
      </div>
      <%= link_to_add_association 'Adicionar Autor', form, :livro_autors, class: "btn btn-primary colorprimarybtn"  %>
    </div>
    <br><br>

    
      <div class="row">
          <div class="col-lg-7 form-group">  
            <input type="submit" name="commit" class="btn btn-primary colorprimarybtn" value="Salvar" data-disable-with="Salvando" />
            <%= link_to 'Voltar', livros_path, :class => "btn btn-primary colorprimarybtn"%>
          </div>
      </div>
   <% end %>   

</div>

<script type="text/javascript">

//gem select2 no combo box da sala  
 $(document).ready(function() {
  $('#editora_id').select2({
   ajax: {
     url: "<%= pesquisa_editoras_path(format: 'json') %>",
     dataType: 'json',
     delay: 250,
     data: function (params) {
       return {
        q: params.term, // search term
        page: params.page
       };
     },
     processResults: function (data, params) {
       // parse the results into the format expected by Select2
       // since we are using custom formatting functions we do not need to
       // alter the remote JSON data, except to indicate that infinite
       // scrolling can be used
       params.page = params.page || 1;

       return {
         results: data,
         pagination: {
           more: (params.page * 30) < data.total_count
         }
       };
     },
     cache: true
   },
     placeholder: 'Pesquisar',
     escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
     minimumInputLength: 0,
     templateResult: formatRepoAnobase,
     templateSelection: formatRepoSelectionAnoBase
   });

    function formatRepoAnobase (repo) {
     if (repo.loading) {
       return repo.text;
     }
     var markup = "<div class='select2-result-repository clearfix' >" +
       "<div class='select2-result-repository__meta'>" +
         "<div class='select2-result-repository__title'>"+repo.nome+"</div>";
     "</div></div>";
     return markup;
   }

   function formatRepoSelectionAnoBase (repo) {
    if(repo.nome != null)
     return repo.nome;
   else
    return repo.text;
   }

});
</script>

<script type="text/javascript">
//gem select2 no combo box da sala  
 $(document).ready(function() {
  $('#categore_id').select2({
   ajax: {
     url: "<%= pesquisa_categores_path(format: 'json') %>",
     dataType: 'json',
     delay: 250,
     data: function (params) {
       return {
        q: params.term, // search term
        page: params.page
       };
     },
     processResults: function (data, params) {
       // parse the results into the format expected by Select2
       // since we are using custom formatting functions we do not need to
       // alter the remote JSON data, except to indicate that infinite
       // scrolling can be used
       params.page = params.page || 1;

       return {
         results: data,
         pagination: {
           more: (params.page * 30) < data.total_count
         }
       };
     },
     cache: true
   },
     placeholder: 'Pesquisar',
     escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
     minimumInputLength: 0,
     templateResult: formatRepoAnobase,
     templateSelection: formatRepoSelectionAnoBase
   });

    function formatRepoAnobase (repo) {
     if (repo.loading) {
       return repo.text;
     }
     var markup = "<div class='select2-result-repository clearfix' >" +
       "<div class='select2-result-repository__meta'>" +
         "<div class='select2-result-repository__title'>"+repo.nome+"</div>";
     "</div></div>";
     return markup;
   }

   function formatRepoSelectionAnoBase (repo) {
    if(repo.nome != null)
     return repo.nome;
   else
    return repo.text;
   }

});
</script>

<script type="text/javascript">
var inputs = document.getElementsByTagName('input');
for (var index = 0; index < inputs.length; ++index) {
  if(inputs[index].id == "nomefield"){
    inputs[index].id = "nome1";    
  }else if(inputs[index].id == "autor_idfield"){
    inputs[index].id = "autor_idfield1";    
  }
}
//gem select2 no combo box da sala  
 $(document).ready(function() {
  $('#autor_id_pesquisa').select2({
   ajax: {
     url: "<%= pesquisa_autors_path(format: 'json') %>",
     dataType: 'json',
     delay: 250,
     data: function (params) {
       return {
        q: params.term, // search term
        page: params.page
       };
     },
     processResults: function (data, params) {
       // parse the results into the format expected by Select2
       // since we are using custom formatting functions we do not need to
       // alter the remote JSON data, except to indicate that infinite
       // scrolling can be used
       params.page = params.page || 1;

       return {
         results: data,
         pagination: {
           more: (params.page * 30) < data.total_count
         }
       };
     },
     cache: true
   },
     placeholder: 'Pesquisar',
     escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
     minimumInputLength: 0,
     templateResult: formatRepoAnobase,
     templateSelection: formatRepoSelectionAnoBase
   });

    function formatRepoAnobase (repo) {
     if (repo.loading) {
       return repo.text;
     }
     var markup = "<div class='select2-result-repository clearfix' >" +
       "<div class='select2-result-repository__meta'>" +
         "<div class='select2-result-repository__title'>"+repo.nome+"</div>";
     "</div></div>";
     return markup;
   }

   function formatRepoSelectionAnoBase (repo) {
    if(repo.nome != null){
      return repo.nome;
    } else {
      armazena_hidden_autor_id(repo.id);
    return repo.text;
   }
  }

});
function armazena_hidden_autor_id(id){
  document.getElementById("hidden_autor_id").value = id;
}
</script>

